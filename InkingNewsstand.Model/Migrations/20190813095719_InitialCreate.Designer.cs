// <auto-generated />
using System;
using InkingNewsstand.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace InkingNewsstand.Model.Migrations
{
    [DbContext(typeof(InkingNewsstandContext))]
    [Migration("20190813095719_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("InkingNewsstand.Model.Feed", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Icon");

                    b.Property<string>("NewsPaperPaperTitle");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("NewsPaperPaperTitle");

                    b.ToTable("Feeds");
                });

            modelBuilder.Entity("InkingNewsstand.Model.News", b =>
                {
                    b.Property<string>("Title");

                    b.Property<string>("Authors");

                    b.Property<DateTimeOffset>("PublishedDate");

                    b.Property<string>("Content");

                    b.Property<string>("CoverUrl");

                    b.Property<string>("ExtendedHtml");

                    b.Property<string>("FeedId");

                    b.Property<byte[]>("InkStrokes");

                    b.Property<string>("InnerHTML");

                    b.Property<bool>("IsFavorite");

                    b.Property<string>("NewsLink");

                    b.Property<string>("NewsPaperPaperTitle");

                    b.Property<string>("Summary");

                    b.HasKey("Title", "Authors", "PublishedDate")
                        .HasName("CompositePrimaryKey_News");

                    b.HasIndex("FeedId");

                    b.HasIndex("NewsPaperPaperTitle");

                    b.ToTable("News");
                });

            modelBuilder.Entity("InkingNewsstand.Model.NewsPaper", b =>
                {
                    b.Property<string>("PaperTitle")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("ExtendMode");

                    b.Property<string>("IconType");

                    b.HasKey("PaperTitle");

                    b.ToTable("NewsPapers");
                });

            modelBuilder.Entity("InkingNewsstand.Model.Feed", b =>
                {
                    b.HasOne("InkingNewsstand.Model.NewsPaper")
                        .WithMany("Feeds")
                        .HasForeignKey("NewsPaperPaperTitle")
                        .HasConstraintName("ManyToOne_OneFeedBelongsToManyNewsPapers");
                });

            modelBuilder.Entity("InkingNewsstand.Model.News", b =>
                {
                    b.HasOne("InkingNewsstand.Model.Feed", "Feed")
                        .WithMany("News")
                        .HasForeignKey("FeedId")
                        .HasConstraintName("OneToMany_OneFeedContainsManyNews");

                    b.HasOne("InkingNewsstand.Model.NewsPaper", "NewsPaper")
                        .WithMany("News")
                        .HasForeignKey("NewsPaperPaperTitle");
                });
#pragma warning restore 612, 618
        }
    }
}
